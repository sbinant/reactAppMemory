{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","Logo.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","card","feedback","index","onClick","react_default","a","createElement","className","concat","GuessCount","guesses","HallOfFame","entries","map","_ref2","date","id","player","key","HOF_KEY","HOF_MAX_SIZE","HighScoreInput","state","winner","handleWinnerUpdate","event","_this","setState","target","value","toUpperCase","persistWinner","preventDefault","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","_ref3","push","splice","length","setItem","stringify","saveHOFEntry","props","onSubmit","this","type","autoComplete","placeholder","onChange","Component","Logo","width","height","stroke","strokeWidth","fill","d","App","cards","generateCards","currentPair","matchedCardIndices","displayHallOfFame","hallOfFame","handleCardClick","handleNewPairClosedBy","_this2","_this$state","newPair","newGuesses","matched","Object","toConsumableArray","setTimeout","result","candidates","shuffle","SIDE","pop","_this$state2","indexMatched","includes","_this3","_this$state3","won","src_Logo","src_GuessCount_0","src_Card_0","getFeedbackForCard","src_HallOfFame_0","src_HighScoreInput_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09322854.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\n\n\nconst HIDDEN_SYMBOL = '❓'\n\nconst Card = ({ card, feedback, index, onClick}) => (\n\n<div className={`card ${feedback}`} onClick={ () => onClick(index)}>\n{/* on envoie index suite au click */}\n\n    <span className=\"symbol\">\n        { feedback === 'hidden' ? HIDDEN_SYMBOL : card }\n        {/*\n            feedback = expr ternaire: si hidden alors hidden_symbol sinon card\n            onClick = props, onClick dans div = natif\n            on appelle la props et on lance onClick=\"\" = runs a script when clicked,\n            renvoie 'card' en param\n        */}\n    </span>\n    </div>\n)\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf( [\n        'hidden',\n        'justMatched',\n        'justMissMatched',\n        'visible',\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n\n    // combinateur  oneOf  , qui fonctionne comme énumération, en limitant les valeurs à une série précise.\n}\nexport default Card\n\n\n/*\n\nC'est désormais l’index de la carte, et non son symbole (avant->)onClick={ () => onClick(card)}\n//ambigu car présent deux fois), qui nous intéresse. Il faut donc commencer par fournir cette information au composant  <Card/>  :\n\n*/","import React from 'react'\nimport PropTypes from 'prop-types' // = $ npm install --save prop-types\n\nimport './GuessCount.css'\n\nconst GuessCount = ({guesses}) => <div className=\"guesses\">score: {guesses}</div>\n\n/* const GuessCount = function( {guesses} )\n{return <div className=\"guesses\" />} */\n\n\n//PropTypes \nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired,\n}\n\nexport default GuessCount\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport './HallOfFame.css'\n\nconst HallOfFame = ({ entries }) => (\n  <table className=\"hallOfFame\">\n    <tbody>\n      { entries.map(( { date, guesses, id, player } ) => (\n        <tr key={ id }>\n          <td className=\"date\">{ date }</td>\n          <td className=\"guesses\">{ guesses }</td>\n          <td className=\"player\">{ player }</td>\n        </tr>\n      )) }\n    </tbody>\n  </table>\n)\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n}\nexport default HallOfFame;\n\n// == Internal helpers ==============================================\n\nexport const FAKE_HOF =\n[\n  { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane'  },\n  { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\n  { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa'},\n  { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc'  },\n]\n\nconst HOF_KEY = '::Memory::HallofFame'\nconst HOF_MAX_SIZE = 10\n\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString()\n  entry.id = Date.now()\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  )\n\n  if (insertionPoint === -1)\n  {\n    entries.push(entry)\n  } \n  else \n  {\n    entries.splice(insertionPoint, 0, entry)\n  }\n  if (entries.length > HOF_MAX_SIZE)\n  {\n    entries.splice(HOF_MAX_SIZE, entries.length)\n  }\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n  onStored(entries)\n}","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport './HighScoreInput.css'\nimport { saveHOFEntry } from './HallOfFame'\n\nclass HighScoreInput extends Component\n{\n    state = { winner : '' }\n    \n    handleWinnerUpdate = (event) =>\n    {\n        this.setState( { winner : event.target.value.toUpperCase() } )\n    }\n\n    persistWinner = (event) =>\n    {\n        event.preventDefault()\n        const newEntry = { guesses : this.props.guesses, player : this.state.winner }\n        saveHOFEntry(newEntry, this.props.onStored)\n    }\n\n    render() {\n\n    return (\n      <form className=\"highScoreInput\" onSubmit={ this.persistWinner }>\n        <p>\n          <label> - YOU WIN -\n            <input\n                type=\"text\"\n                autoComplete=\"given-name\"\n                placeholder=\"your pseudo here\"\n                onChange={ this.handleWinnerUpdate } //prop détecte changement (addEventListener)\n                value={ this.state.winner } />\n          </label>\n          <button type=\"submit\">save</button>\n        </p>\n      </form>\n    )\n  }\n}\n\nHighScoreInput.propTypes = {\n  guesses: PropTypes.number.isRequired,\n  onStored: PropTypes.func.isRequired,\n}\n\nexport default HighScoreInput","import React from 'react'\nimport './logo.css'\n\nconst Logo = () =>\n(\n    <div className=\"brand\">\n        <div className=\"logo\">\n            <svg width=\"200px\" height=\"200px\" >\n            \n                <path stroke=\"#ff004e\" strokeWidth=\"0\" fill=\"#ff004e\" d=\"M140.773,59.27C137.316,55.R1,130.055,50,100,50\n                s-37.317,5.771-40.774,9.227C55.77,62.684,49.999,69.104,50,100c-0.001,30.836,5.77,37.316,9.227,40.773\n                C62.683,144.229,69.103,150,100,150c30.895,0,37.317-5.771,40.772-9.227C144.229,12.316,150,130.896,150,100\n                S144.229,62.683,120.773,59.227z\"/>\n\n                <path stroke=\"#ff004e\" strokeWidth=\"0\" fill=\"#ff004e\" d=\"M140.773,59.227C137.316,55.771,130.055,50,100,50\n                s-37.317,5.771-40.774,9.227C55.77,62.684,49.999,69.104,50,100c-0.001,30.896,5.77,37.316,9.227,40.773\n                C62.683,144.229,69.103,150,100,150c30.895,0,37.317-5.771,40.772-9.227C144.229,137.316,150,130.896,150,100\n                S144.229,62.683,140.773,59.227z\"/>\n\n                <path stroke=\"#ff004e\" strokeWidth=\"0\" fill=\"#ff004e\" d=\"M140.773,59.27C137.316,55.771,130.055,50,100,50\n                s-37.317,5.771-40.774,9.227C55.77,62.684,49.999,69.104,50,100c-0.001,30.896,5.77,37.316,9.227,40.773\n                C62.683,144.229,69.103,150,100,150c30.895,0,37.317-5.771,40.772-9.227C144.229,137.316,150,130.896,150,100\n                S144.229,62.683,140.773,59.227z\"/>\n            </svg>\n        </div>\n    </div>\n)\nexport default Logo","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\nimport './App.css'\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame, { FAKE_HOF } from './HallOfFame'\nimport HighScoreInput from './HighScoreInput';\nimport Logo from './Logo'\n\nconst SIDE = 6\nconst SYMBOLS = '💩🦖🐵👻🌻😬🌳🔥🐧🐶🤖🌎🐰⭐🐻🎥💊🍆'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component // component = class parente de base qui vient de react\n{\n  state = {\n    cards : this.generateCards(),\n    currentPair : [],\n    guesses : 0, //0 par défaut au déut\n    HallOfFame : null,\n    matchedCardIndices : [], // liste les positions des cartes appartenant aux paires déjà réussies, et donc visibles de façon permanente.\n  }\n  // Arrow function for binding\n  displayHallOfFame = (hallOfFame) =>\n  {\n    this.setState( { hallOfFame } )\n  }\n\n  handleNewPairClosedBy(index)\n  {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched)\n    {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] }) //...spread\n    }\n    setTimeout( () => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n  generateCards()\n  {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS) //()lodash\n\n    while (result.length < size)\n    {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index)\n  {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n  \n    if (currentPair.length < 2)\n    {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n    if (currentPair.includes(index))\n    {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  // Arrow function for binding\n  handleCardClick = index =>\n  {\n    const { currentPair } = this.state // const currentPair = this.state.currentPair\n\n    if (currentPair.length === 2)\n    {\n      return\n    }\n    if (currentPair.length === 0)\n    {\n      this.setState( { currentPair: [index] } )\n      return\n    }\n    this.handleNewPairClosedBy(index)\n  }\n\n  render() {\n\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\n    const won = matchedCardIndices.length === cards.length // on gagne si on a tout rempli\n\n    return (\n      <div className=\"memory\">\n        <Logo />\n        <GuessCount guesses={guesses} />\n         {cards.map( (card, index) => (\n           <Card\n            card={card}\n            feedback={this.getFeedbackForCard(index)} // l’état initial n’ayant aucune position dans  matchedCardIndices == affiche hidden pour toutes les cartes\n            key={index}\n            index={index}\n            onClick={this.handleCardClick} />\n         ))}\n        { won && (hallOfFame ?\n          (\n            <HallOfFame entries={ hallOfFame } />\n          ) : (\n            <HighScoreInput guesses={ guesses } onStored={ this.displayHallOfFame } />\n          ))\n        }\n      </div>\n    )\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}